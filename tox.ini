[tox]
labels =
    static = pre-commit, mypy
    tests = unit-tests, e2e-tests, doctests
isolated_build = true
minversion = 3.20.0
skipsdist = true

[testenv]
description = run the pytest tests under {basepython}
setenv =
    PYTHONDONTWRITEBYTECODE=1
    PYTHONHASHSEED=0
passenv =
    CI
    GITHUB_*
    PY_PYTHON_VERSION
    PY_SYS_PLATFORM
    PYTEST_*
parallel_show_output = true
skip_install = true
deps = -r requirements/locked/tests.{env:PY_PYTHON_VERSION}-{env:PY_SYS_PLATFORM}.txt
commands =
    pytest: pytest {posargs:}
    unit-tests: pytest tests/unit --cov-report=xml {posargs:}
    e2e-tests: pytest tests/e2e {posargs:}
    doctests: pytest --doctest-modules src {posargs:}

[testenv:pre-commit]
description = run code style and linting checks with pre-commit
passenv =
    {[testenv]passenv}
    PRE_COMMIT_HOME
    XDG_CACHE_HOME
    SSH_AUTH_SOCK
deps = pre-commit
commands =
    pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:mypy]
description = run type checks with mypy
deps = -r requirements/locked/mypy.{env:PY_PYTHON_VERSION}-{env:PY_SYS_PLATFORM}.txt
commands =
    mypy --config-file=mypy.ini --cache-dir=/dev/null --no-incremental {posargs:}

[testenv:docs-{live,static}]
description = generate Sphinx (live/static) HTML documentation
deps = -r requirements/locked/docs.{env:PY_PYTHON_VERSION}-{env:PY_SYS_PLATFORM}.txt
allowlist_externals = make
commands =
    make --directory=docs clean
    live: make --directory=docs livehtml
    static: make --directory=docs html
            python "bin/open_in_browser.py" "docs/build/html/index.html"

[testenv:release-notes]
description = extract release notes from CHANGES.md
deps = -r requirements/locked/release-notes.{env:PY_PYTHON_VERSION}-{env:PY_SYS_PLATFORM}.txt
commands =
    python bin/extract_latest_release_notes.py

[testenv:build]
description = build source and wheel package
deps = -r requirements/locked/release.{env:PY_PYTHON_VERSION}-{env:PY_SYS_PLATFORM}.txt
allowlist_externals = rm
commands =
    rm -rf dist/
    python -m build
    twine check --strict dist/*

[testenv:publish-pypi-{test,prod}]
description = package and upload the source and wheel package to (test/prod) PyPI
depends = build
deps = -r requirements/locked/release.{env:PY_PYTHON_VERSION}-{env:PY_SYS_PLATFORM}.txt
passenv =
    {[testenv]passenv}
    TWINE_PASSWORD
commands =
    test: twine upload --verbose --repository testpypi dist/*
    prod: twine upload --verbose dist/*

[testenv:upgrade-deps]
description = upgrade and lock dependencies
deps =
    pre-commit
    pip-compile-multi
    # https://github.com/mitsuhiko/rye/issues/368
    pip==23.1
commands =
    pre-commit autoupdate
    python bin/upgrade_and_lock_requirements.py
